
#139.159.187.136  6400  maiyue_123!@#
spring:
  #json时间格式配置
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss

  #数据库配置
  datasource:
    url: jdbc:mysql://10.17.76.101:3306/neco_messagecentre?characterEncoding=utf-8&serverTimezone=GMT%2B8
    username: root
    password: 123456
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    initialSize: 5
    minIdle: 5
    maxActive: 20
    maxWait: 1000
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    filters: stat,wall,log4j
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    logSlowSql: true
  #mongodb配置
  data:
    #mongodb:
    #  database: zxs_smartgovernment
    #  host: 10.17.76.101
    #  port: 27017
    mongodb:
      uri:  mongodb://root:123@192.168.106.101:27017
      database: zxs_smartgovernment
  #redis配置
  redis:
    database: 0
    # Redis服务器地址 127.0.0.1 /192.168.117.57 / 172.20.14.163  /10.17.76.101/ 192.168.106.101
    host: 10.17.76.101
    # Redis服务器连接端口
    port: 6379
    # Redis服务器连接密码（默认为空）
    password:
    # 连接超时时间（毫秒）
    timeout: 5000
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 1000
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: 30000
        # 连接池中的最大空闲连接
        max-idle: 10
        # 连接池中的最小空闲连接
        min-idle: 1
  #rabbimq配置
  rabbitmq:
    virtual-host: /
    host: 10.17.76.101
    port: 5672
    username: guest
    password: guest
    listener:
      simple:
        concurrency: 10
        max-concurrency: 20
        prefetch: 50
  #nacos配置
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848

#mybatisplus配置
mybatis-plus:
  config-location: classpath:mapper/sqlConfig.xml
  mapper-locations: classpath*:mapper/messagecentre/*.xml
  type-aliases-package: com.neco.messagecentre.model
  global-config:
    id-type: 2
    db-column-underline: false
    refresh-mapper: true
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: true
    lazy-loading-enabled: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

#分页插件配置
pageInterceptor:
  # mysql oracle
  dialectType: mysql
  localPage: true


#开启请求收集日志
sg:
  log:
    enable: true



#基础测试队列有关设置
#basic.info.mq.exchange.name = local.basic.info.mq.exchange
#basic.info.mq.routing.key.name = local.basic.info:mq.routing.key
#basic.info.mq.queue.name = local.basic.info.mq.queue
basic:
  info:
    mq:
      exchange:
        name: local.basic.info.mq.exchange
      routing:
        key:
          name: local.basic.info:mq.routing.key
      queue:
        name: local.basic.info.mq.queue

# product.robbing.mq.exchange.name=${mq.env}:product:robbing:mq:exchange
# product.robbing.mq.routing.key.name=${mq.env}:product:robbing:mq:routing:key
# product.robbing.mq.queue.name=${mq.env}:product:robbing:mq:queue
product:
  robbing:
    mq:
      exchange:
        name: local.product.robbing.mq.exchange
      routing:
        key:
          name: local.product.robbing.mq.routing.key
      queue:
        name: local.product.robbing.mq.queue

  # simple.mq.queue.name=${mq.env}.simple.mq.queue
  # simple.mq.exchange.name=${mq.env}.simple.mq.exchange
  # simple.mq.routing.key.name=${mq.env}.simple.mq.routing.key
simple:
  mq:
    queue:
      name: local.simple.mq.queue
    exchange:
      name: local.simple.mq.exchange
    routing:
      key:
        name: local.simple.mq.routing.key

  #user.order.dead.queue.name=${mq.env}.user.order.dead.queue
  #user.order.dead.exchange.name=${mq.env}.user.order.dead.exchange
  #user.order.dead.routing.key.name=${mq.env}.user.order.dead.routing.key

  #user.order.dead.produce.exchange.name=${mq.env}.user.order.dead.produce.exchange
  #user.order.dead.produce.routing.key.name=${mq.env}.user.order.dead.produce.routing.key
  #user.order.dead.produce.queue.name=${mq.env}.user.order.produce.real.queue
# 死信队列
user:
  order:
    dead:
      queue:
        name: local.user.order.dead.queue
      exchange:
        name: local.user.order.dead.exchange
      routing:
        key:
          name: local.user.order.dead.routing.key

      produce:
        exchange:
          name: local.user.order.dead.produce.exchange
        queue:
          name: local.user.order.produce.real.queue
        routing:
          key:
            name: local.user.order.dead.produce.routing.key
